from sklearn.neural_network import MLPClassifier, MLPRegressor
import numpy as np
from tabulate import tabulate
import matplotlib.pyplot as plt
import csv

# Genererer en masse lister
dato = []
closing_price = []
opening_price = []
Y = []
RSI10 = []
#RSI30 = []
#RSI90 = []
RSI10pred = []
Tal = []
Koordinat = []

# Her genereres vores prediction.
def generatey():
    if pos <= 30:
        return 0
    elif pos >= 70:
        return 2
    else:
        return 1

# Row navne er
# Date(0),Opening price(1),Closing price(2),avg_gain10(3),abs_gain10(4),avg_loss10(5),abs_loss10(6),avg_gain30(7),abs_gain30(8),avg_loss30(9),abs_loss30(10),avg_gain90(11),abs_gain90(12),avg_loss90(12),abs_loss90(13),RSI10(14),RSI 30(15),RSI 90(16)
# Her importer vi vores CSV fil
# MAERSK.csv er den fulde fil, test.csv er en test fil med 10 linjer data
with open('2015.csv', 'r') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    for row in reader:
        dato.append(row[0])
        opening_price.append(int(row[1]))
        closing_price.append(int(row[2]))
        RSI10.append(int(row[14]))
        #RSI30.append(row[15])
        #RSI90.append(row[16])

for i in range(len(dato)):
    x1 = i+1
    x2 = RSI10[i]
    Tal.append([x1,x2])

print(Tal)
print(len(Tal))

def merge(Tal, RSI10):
    merged_list = [(Tal[k], RSI10[k]) for k in range(0, len(Tal))]
    Koordinat.append(merged_list)
    return merged_list

for pos in RSI10:
    RSI10pred.append(generatey())

print(RSI10pred)
print(len(RSI10pred))

#print(RSI10pred)
#print(X)

#X.append([Tal,RSI10pred])
#print(X)

#axes = plt.axes()
#axes.set_ylim([4500,10000])
#plt.xlabel("Dato")
#plt.ylabel("Pris")
#plt.plot(dato, opening_price, closing_price)
#plt.xticks(rotation=90)
#line1, = plt.plot(opening_price)
#line2, = plt.plot(closing_price)
#line1.set_label("Opening price")
#line2.set_label("Closing price")
#plt.legend()
#plt.show()


#This sets up the network
clf = MLPRegressor(
    tol=1e-9,
    activation='logistic',
    verbose=False,
    momentum=0.8, #skridtst√∏rrelse
    n_iter_no_change=500,
    max_iter=10000,
    solver='adam',
    learning_rate='adaptive',
    alpha=1e-4,
    hidden_layer_sizes=(3),
    random_state=1) # create ANN

#This trains the network
r=clf.fit(Tal, RSI10pred)   #train ANN
print(r)

#After training (fitting), the network can predict output for new samples:
print("Result of training")
#First we check the trained points, to see how accurate the learning have been:
res=clf.predict(Tal).round(2)
print("Output for the input points we just trained:")
print(np.around(Tal,2))
print(res)
print("Output for other points")
T=[[62, 69.]]
print(np.around(T,2))
res=clf.predict(T).round(2)
print(res)
# During the training new weights have been found in the network. These are stored in the network model.
print("During the training new weights have been found in the network. These are:")
print(np.around(clf.coefs_[0],2))
print(np.around(clf.coefs_[1],2))
print("end")

# During training the Error changes with each iteration - hopefully it goes down
# The training can be monitored by following the Error curve.
print("Plotting the Error curve.")
plt.semilogy(clf.loss_curve_)
plt.show()
#input("Press a key")

# To understand the result of the network, it can help to see the decision boundaries.
# This can be done for problems with 2 inputs in a 3D plot
# In our example, let's look at the region from -3 to 3 for x1 and x2.
# We ask the network to calculate output for "all" combinations of (x1,x2) in this area.
# We select a grid of points close enough to show us how the output function is changing
# We use a fixed granularity.
x1min = 0
x2min = 0
x1max = 100
x2max = 100
granularity = 100
x1step = (x1max-x1min)/granularity
x2step = (x2max-x2min)/granularity
Dp = np.zeros((granularity,granularity))
x1 = x1min
for r in range(0,granularity,1):
    x2 = x2min
    for s in range(0,granularity,1):
        Dp[r,s]= clf.predict([[x1, x2]])
        x2 += x2step
    x1 += x1step

#preparing the 3D plot
from mpl_toolkits.mplot3d import Axes3D
# Axes3D import has side effects, it enables using projection='3d' in add_subplot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x = np.arange(x1min, x1max, x1step)
y = np.arange(x2min, x2max, x2step)
X, Y = np.meshgrid(x, y)
ax.plot_surface(X, Y, Dp)
ax.set_xlabel('RSI 10')
ax.set_ylabel('Dag')
ax.set_zlabel('RSI Prediction')
plt.show()

print("Done now.")
