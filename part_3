from sklearn.neural_network import MLPClassifier, MLPRegressor
import numpy as np
import matplotlib.pyplot as plt
import csv

# Genererer en masse lister
dato = []
closing_price = []
opening_price = []
Y = []
RSI10 = []
RSI10pred = []
Tal = []

# Her genereres en RSI prediction, som beskriver hvorvidt kunden skal holde, sælge eller købe aktierne i løbet af dagen.
def generatey():
    if pos <= 30:
        return 0
    elif pos >= 70:
        return 2
    else:
        return 1

# Her åbnes CSV filen, samt importerer data
with open('test.csv', 'r') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    for row in reader:
        dato.append(row[0])
        opening_price.append(int(row[1]))
        closing_price.append(int(row[2]))

        avg_gain10 = abs((((sum(opening_price[-10:])) - sum(closing_price[-10:])) / 10))
        #print(avg_gain10)
        avg_loss10 = abs((((sum(opening_price[-10:])) - sum(closing_price[-11:-1])) / 10))
        #print(avg_loss10)
        RSI10t = int((100 - (100 / (1 + (avg_gain10 / avg_loss10)))))
        RSI10.append(RSI10t)
        #print(RSI10)

# Her beregnes RSI10


# Her genereres koordinater til 3d plottet, det er en kombination af RSI tal, samt dato i tal (1, 2 ...)
for i in range(len(dato)):
    x1 = i+1
    x2 = RSI10[i]
    Tal.append([x1,x2])

# RSI tallet køres igennem RSI-prediction funktionen
for pos in RSI10:
    RSI10pred.append(generatey())

# This sets up the network
clf = MLPRegressor(
    tol=1e-9,
    activation='logistic',
    verbose=False,
    momentum=0.8, #skridtstørrelse
    n_iter_no_change=500,
    max_iter=10000,
    solver='adam',
    learning_rate='adaptive',
    alpha=1e-4,
    hidden_layer_sizes=(3),
    random_state=1) # create ANN

# This trains the network
r=clf.fit(Tal, RSI10pred)   #train ANN
print(r)

# After training (fitting), the network can predict output for new samples:
print("Result of training")
# First we check the trained points, to see how accurate the learning have been:
res=clf.predict(Tal).round(2)
print("Output for the input points we just trained:")
print(np.around(Tal,2))
print(res)
print("Output for other points")
T=[[62, 69.]]
print(np.around(T,2))
res=clf.predict(T).round(2)
print(res)
# During the training new weights have been found in the network. These are stored in the network model.
print("During the training new weights have been found in the network. These are:")
print(np.around(clf.coefs_[0],2))
print(np.around(clf.coefs_[1],2))
print("end")

# During training the Error changes with each iteration - hopefully it goes down
# The training can be monitored by following the Error curve.
print("Plotting the Error curve.")
plt.semilogy(clf.loss_curve_)
plt.show()
plt.savefig('Error curve.png')
#input("Press a key")

# To understand the result of the network, it can help to see the decision boundaries.
# This can be done for problems with 2 inputs in a 3D plot
# In our example, let's look at the region from -3 to 3 for x1 and x2.
# We ask the network to calculate output for "all" combinations of (x1,x2) in this area.
# We select a grid of points close enough to show us how the output function is changing
# We use a fixed granularity.
x1min = 0
x2min = 0
x1max = 100
x2max = 100
granularity = 100
x1step = (x1max-x1min)/granularity
x2step = (x2max-x2min)/granularity
Dp = np.zeros((granularity,granularity))
x1 = x1min
for r in range(0,granularity,1):
    x2 = x2min
    for s in range(0,granularity,1):
        Dp[r,s]= clf.predict([[x1, x2]])
        x2 += x2step
    x1 += x1step

# preparing the 3D plot
from mpl_toolkits.mplot3d import Axes3D
# Axes3D import has side effects, it enables using projection='3d' in add_subplot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x = np.arange(x1min, x1max, x1step)
y = np.arange(x2min, x2max, x2step)
X, Y = np.meshgrid(x, y)
ax.plot_surface(X, Y, Dp)
# Her plottes labels for vores data
ax.set_xlabel('RSI 10')
ax.set_ylabel('Dag')
ax.set_zlabel('RSI Prediction')
plt.show()
plt.savefig('3d.png')

# Rækkefølgen af listerne vendes om for at kunne tegne grafen i kronogisk rækkefølge.
RSI10.reverse()
Tal.reverse()
dato.reverse()
opening_price.reverse()
closing_price.reverse()

# Her plottes grafen.
fig, ax1 = plt.subplots()

# Her defineres X og Y1 aksen i plottet
color = 'tab:red'
ax1.set_xlabel('dato')
ax1.set_ylabel('Opening price', color=color)
ax1.plot(dato, opening_price, color=color)
ax1.set_xticklabels(dato, rotation=90)
ax1.set_xlim(533,563)
ax1.set_ylim(4000,7000)

# Her defineres at Y2 skal være spejlvendt akse fra Y1
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

# Her skabes Y2 aksen som viser RSI 'en
color = 'tab:blue'
ax2.set_ylabel('RSI', color=color)  # we already handled the x-label with ax1
ax2.plot(dato, RSI10, color=color)
ax2.tick_params(axis='y', labelcolor=color)
ax2.set_ylim(0,100)

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()
plt.savefig('RSI vs Opening price.png')

fig, ax1 = plt.subplots()

# Her plottes opening og closing price listerne i et diagram.
# Her defineres X og Y1 aksen i plottet
color = 'tab:red'
ax1.set_xlabel('Dato')
ax1.set_ylabel('Opening price', color=color)
ax1.plot(dato, opening_price, color=color)
ax1.set_xticklabels(dato, rotation=90)
ax1.set_xlim(533,563)
ax1.set_ylim(4000,7000)

# Her defineres at Y2 skal være spejlvendt akse fra Y1
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

# Her skabes Y2 aksen som viser RSI 'en
color = 'tab:blue'
ax2.set_ylabel('Closing price', color=color)
ax2.plot(dato, closing_price, color=color)
ax2.tick_params(axis='y', labelcolor=color)
ax2.set_ylim(4000,7000)

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()
plt.savefig('Opening vs closing price.png')
